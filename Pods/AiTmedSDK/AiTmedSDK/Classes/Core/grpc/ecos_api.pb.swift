// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ecos_api.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

//
// AiTmed, Inc. (c) 2019

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Create Edge Request.
struct Aitmed_Ecos_V1beta1_ceReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String {
    get {return _storage._jwt}
    set {_uniqueStorage()._jwt = newValue}
  }

  var pmask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._pmask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._pmask = newValue}
  }
  /// Returns true if `pmask` has been explicitly set.
  var hasPmask: Bool {return _storage._pmask != nil}
  /// Clears the value of `pmask`. Subsequent reads from it will return its default value.
  mutating func clearPmask() {_uniqueStorage()._pmask = nil}

  var rmask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._rmask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._rmask = newValue}
  }
  /// Returns true if `rmask` has been explicitly set.
  var hasRmask: Bool {return _storage._rmask != nil}
  /// Clears the value of `rmask`. Subsequent reads from it will return its default value.
  mutating func clearRmask() {_uniqueStorage()._rmask = nil}

  var edge: Aitmed_Ecos_V1beta1_Edge {
    get {return _storage._edge ?? Aitmed_Ecos_V1beta1_Edge()}
    set {_uniqueStorage()._edge = newValue}
  }
  /// Returns true if `edge` has been explicitly set.
  var hasEdge: Bool {return _storage._edge != nil}
  /// Clears the value of `edge`. Subsequent reads from it will return its default value.
  mutating func clearEdge() {_uniqueStorage()._edge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Create Edge Response
struct Aitmed_Ecos_V1beta1_ceResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String {
    get {return _storage._jwt}
    set {_uniqueStorage()._jwt = newValue}
  }

  var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  var error: String {
    get {return _storage._error}
    set {_uniqueStorage()._error = newValue}
  }

  var edge: Aitmed_Ecos_V1beta1_Edge {
    get {return _storage._edge ?? Aitmed_Ecos_V1beta1_Edge()}
    set {_uniqueStorage()._edge = newValue}
  }
  /// Returns true if `edge` has been explicitly set.
  var hasEdge: Bool {return _storage._edge != nil}
  /// Clears the value of `edge`. Subsequent reads from it will return its default value.
  mutating func clearEdge() {_uniqueStorage()._edge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Retrieve any object request
/// Request id have to be the ids of the same kind
/// otherwise will drop any ids which are different from the first id in the list
/// Query/Search/Retrieve privileges are control by jwt.
/// ObjType is only 0 = Vertex, 1 = Doc and 2 = Edge
/// id is one or many UUIDs which are compared with the x_field_name as xfname.
/// key is a string of search keys in boolean form such as
///   (key1 & key2 | key3 | key4) & !key5 to search agains xfname
///   if key ends with "!", exact key matched is required.
///   'key' could be in regular expression form
/// This API is used by Application Level SDK to implement more sophistical functions 
struct Aitmed_Ecos_V1beta1_rxReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required
  var jwt: String {
    get {return _storage._jwt}
    set {_uniqueStorage()._jwt = newValue}
  }

  var pmask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._pmask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._pmask = newValue}
  }
  /// Returns true if `pmask` has been explicitly set.
  var hasPmask: Bool {return _storage._pmask != nil}
  /// Clears the value of `pmask`. Subsequent reads from it will return its default value.
  mutating func clearPmask() {_uniqueStorage()._pmask = nil}

  var rmask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._rmask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._rmask = newValue}
  }
  /// Returns true if `rmask` has been explicitly set.
  var hasRmask: Bool {return _storage._rmask != nil}
  /// Clears the value of `rmask`. Subsequent reads from it will return its default value.
  mutating func clearRmask() {_uniqueStorage()._rmask = nil}

  /// Required
  var objType: Int32 {
    get {return _storage._objType}
    set {_uniqueStorage()._objType = newValue}
  }

  /// Optional
  var id: [Data] {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// id will be checked against xfname
  var xfname: String {
    get {return _storage._xfname}
    set {_uniqueStorage()._xfname = newValue}
  }

  /// Optional if omitted, 0 is the default for all types.
  var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Optional if omitted, no string search will be done.
  var key: String {
    get {return _storage._key}
    set {_uniqueStorage()._key = newValue}
  }

  /// Optional, comma-separated field names
  var sfname: String {
    get {return _storage._sfname}
    set {_uniqueStorage()._sfname = newValue}
  }

  ///Optional, if presented, its ObjType  should be matched with ObjType
  var loid: Data {
    get {return _storage._loid}
    set {_uniqueStorage()._loid = newValue}
  }

  /// it is used for paginate response. It is the last item from previous returned
  var maxcount: Int32 {
    get {return _storage._maxcount}
    set {_uniqueStorage()._maxcount = newValue}
  }

  /// 1000, this about minimum 256K payload on average.
  var obfname: String {
    get {return _storage._obfname}
    set {_uniqueStorage()._obfname = newValue}
  }

  /// if omitted, 'mtime' is assumed.
  var sCondition: String {
    get {return _storage._sCondition}
    set {_uniqueStorage()._sCondition = newValue}
  }

  ///return order in ascending order,
  var asc: Bool {
    get {return _storage._asc}
    set {_uniqueStorage()._asc = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Retrive Edge Response
struct Aitmed_Ecos_V1beta1_reResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String = String()

  var code: Int32 = 0

  var error: String = String()

  var edge: [Aitmed_Ecos_V1beta1_Edge] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Retrive Vertex Response
struct Aitmed_Ecos_V1beta1_rvResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String = String()

  var code: Int32 = 0

  var error: String = String()

  var vertex: [Aitmed_Ecos_V1beta1_Vertex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Retrieve Doc Resp.
struct Aitmed_Ecos_V1beta1_rdResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String = String()

  var code: Int32 = 0

  var error: String = String()

  var doc: [Aitmed_Ecos_V1beta1_Doc] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Delete any kind of objects Request
struct Aitmed_Ecos_V1beta1_dxReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String = String()

  var id: [Data] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Delete any kind of objects Response
struct Aitmed_Ecos_V1beta1_dxResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String = String()

  var code: Int32 = 0

  var error: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Create Vertex Request
struct Aitmed_Ecos_V1beta1_cvReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String {
    get {return _storage._jwt}
    set {_uniqueStorage()._jwt = newValue}
  }

  var pmask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._pmask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._pmask = newValue}
  }
  /// Returns true if `pmask` has been explicitly set.
  var hasPmask: Bool {return _storage._pmask != nil}
  /// Clears the value of `pmask`. Subsequent reads from it will return its default value.
  mutating func clearPmask() {_uniqueStorage()._pmask = nil}

  var rmask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._rmask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._rmask = newValue}
  }
  /// Returns true if `rmask` has been explicitly set.
  var hasRmask: Bool {return _storage._rmask != nil}
  /// Clears the value of `rmask`. Subsequent reads from it will return its default value.
  mutating func clearRmask() {_uniqueStorage()._rmask = nil}

  var vertex: Aitmed_Ecos_V1beta1_Vertex {
    get {return _storage._vertex ?? Aitmed_Ecos_V1beta1_Vertex()}
    set {_uniqueStorage()._vertex = newValue}
  }
  /// Returns true if `vertex` has been explicitly set.
  var hasVertex: Bool {return _storage._vertex != nil}
  /// Clears the value of `vertex`. Subsequent reads from it will return its default value.
  mutating func clearVertex() {_uniqueStorage()._vertex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Create Vertex Response
struct Aitmed_Ecos_V1beta1_cvResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String {
    get {return _storage._jwt}
    set {_uniqueStorage()._jwt = newValue}
  }

  var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  var error: String {
    get {return _storage._error}
    set {_uniqueStorage()._error = newValue}
  }

  var vertex: Aitmed_Ecos_V1beta1_Vertex {
    get {return _storage._vertex ?? Aitmed_Ecos_V1beta1_Vertex()}
    set {_uniqueStorage()._vertex = newValue}
  }
  /// Returns true if `vertex` has been explicitly set.
  var hasVertex: Bool {return _storage._vertex != nil}
  /// Clears the value of `vertex`. Subsequent reads from it will return its default value.
  mutating func clearVertex() {_uniqueStorage()._vertex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Create Doc Request
struct Aitmed_Ecos_V1beta1_cdReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String {
    get {return _storage._jwt}
    set {_uniqueStorage()._jwt = newValue}
  }

  var pmask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._pmask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._pmask = newValue}
  }
  /// Returns true if `pmask` has been explicitly set.
  var hasPmask: Bool {return _storage._pmask != nil}
  /// Clears the value of `pmask`. Subsequent reads from it will return its default value.
  mutating func clearPmask() {_uniqueStorage()._pmask = nil}

  var rmask: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._rmask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._rmask = newValue}
  }
  /// Returns true if `rmask` has been explicitly set.
  var hasRmask: Bool {return _storage._rmask != nil}
  /// Clears the value of `rmask`. Subsequent reads from it will return its default value.
  mutating func clearRmask() {_uniqueStorage()._rmask = nil}

  var doc: Aitmed_Ecos_V1beta1_Doc {
    get {return _storage._doc ?? Aitmed_Ecos_V1beta1_Doc()}
    set {_uniqueStorage()._doc = newValue}
  }
  /// Returns true if `doc` has been explicitly set.
  var hasDoc: Bool {return _storage._doc != nil}
  /// Clears the value of `doc`. Subsequent reads from it will return its default value.
  mutating func clearDoc() {_uniqueStorage()._doc = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Create Doc Resp.
struct Aitmed_Ecos_V1beta1_cdResp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jwt: String {
    get {return _storage._jwt}
    set {_uniqueStorage()._jwt = newValue}
  }

  var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  var error: String {
    get {return _storage._error}
    set {_uniqueStorage()._error = newValue}
  }

  var doc: Aitmed_Ecos_V1beta1_Doc {
    get {return _storage._doc ?? Aitmed_Ecos_V1beta1_Doc()}
    set {_uniqueStorage()._doc = newValue}
  }
  /// Returns true if `doc` has been explicitly set.
  var hasDoc: Bool {return _storage._doc != nil}
  /// Clears the value of `doc`. Subsequent reads from it will return its default value.
  mutating func clearDoc() {_uniqueStorage()._doc = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "aitmed.ecos.v1beta1"

extension Aitmed_Ecos_V1beta1_ceReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ceReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "pmask"),
    3: .same(proto: "rmask"),
    4: .same(proto: "edge"),
  ]

  fileprivate class _StorageClass {
    var _jwt: String = String()
    var _pmask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _rmask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _edge: Aitmed_Ecos_V1beta1_Edge? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _pmask = source._pmask
      _rmask = source._rmask
      _edge = source._edge
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._jwt)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pmask)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._rmask)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._edge)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._jwt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jwt, fieldNumber: 1)
      }
      if let v = _storage._pmask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._rmask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._edge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_ceReq, rhs: Aitmed_Ecos_V1beta1_ceReq) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._pmask != rhs_storage._pmask {return false}
        if _storage._rmask != rhs_storage._rmask {return false}
        if _storage._edge != rhs_storage._edge {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_ceResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ceResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "code"),
    3: .same(proto: "error"),
    4: .same(proto: "edge"),
  ]

  fileprivate class _StorageClass {
    var _jwt: String = String()
    var _code: Int32 = 0
    var _error: String = String()
    var _edge: Aitmed_Ecos_V1beta1_Edge? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _code = source._code
      _error = source._error
      _edge = source._edge
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._jwt)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._error)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._edge)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._jwt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jwt, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._error.isEmpty {
        try visitor.visitSingularStringField(value: _storage._error, fieldNumber: 3)
      }
      if let v = _storage._edge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_ceResp, rhs: Aitmed_Ecos_V1beta1_ceResp) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._error != rhs_storage._error {return false}
        if _storage._edge != rhs_storage._edge {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_rxReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".rxReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "pmask"),
    3: .same(proto: "rmask"),
    4: .same(proto: "ObjType"),
    5: .same(proto: "id"),
    6: .same(proto: "xfname"),
    7: .same(proto: "type"),
    8: .same(proto: "key"),
    9: .same(proto: "sfname"),
    10: .same(proto: "loid"),
    11: .same(proto: "maxcount"),
    12: .same(proto: "obfname"),
    13: .same(proto: "sCondition"),
    14: .same(proto: "asc"),
  ]

  fileprivate class _StorageClass {
    var _jwt: String = String()
    var _pmask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _rmask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _objType: Int32 = 0
    var _id: [Data] = []
    var _xfname: String = String()
    var _type: Int32 = 0
    var _key: String = String()
    var _sfname: String = String()
    var _loid: Data = SwiftProtobuf.Internal.emptyData
    var _maxcount: Int32 = 0
    var _obfname: String = String()
    var _sCondition: String = String()
    var _asc: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _pmask = source._pmask
      _rmask = source._rmask
      _objType = source._objType
      _id = source._id
      _xfname = source._xfname
      _type = source._type
      _key = source._key
      _sfname = source._sfname
      _loid = source._loid
      _maxcount = source._maxcount
      _obfname = source._obfname
      _sCondition = source._sCondition
      _asc = source._asc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._jwt)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pmask)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._rmask)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._objType)
        case 5: try decoder.decodeRepeatedBytesField(value: &_storage._id)
        case 6: try decoder.decodeSingularStringField(value: &_storage._xfname)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._type)
        case 8: try decoder.decodeSingularStringField(value: &_storage._key)
        case 9: try decoder.decodeSingularStringField(value: &_storage._sfname)
        case 10: try decoder.decodeSingularBytesField(value: &_storage._loid)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._maxcount)
        case 12: try decoder.decodeSingularStringField(value: &_storage._obfname)
        case 13: try decoder.decodeSingularStringField(value: &_storage._sCondition)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._asc)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._jwt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jwt, fieldNumber: 1)
      }
      if let v = _storage._pmask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._rmask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._objType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._objType, fieldNumber: 4)
      }
      if !_storage._id.isEmpty {
        try visitor.visitRepeatedBytesField(value: _storage._id, fieldNumber: 5)
      }
      if !_storage._xfname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._xfname, fieldNumber: 6)
      }
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 7)
      }
      if !_storage._key.isEmpty {
        try visitor.visitSingularStringField(value: _storage._key, fieldNumber: 8)
      }
      if !_storage._sfname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sfname, fieldNumber: 9)
      }
      if !_storage._loid.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._loid, fieldNumber: 10)
      }
      if _storage._maxcount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxcount, fieldNumber: 11)
      }
      if !_storage._obfname.isEmpty {
        try visitor.visitSingularStringField(value: _storage._obfname, fieldNumber: 12)
      }
      if !_storage._sCondition.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sCondition, fieldNumber: 13)
      }
      if _storage._asc != false {
        try visitor.visitSingularBoolField(value: _storage._asc, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_rxReq, rhs: Aitmed_Ecos_V1beta1_rxReq) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._pmask != rhs_storage._pmask {return false}
        if _storage._rmask != rhs_storage._rmask {return false}
        if _storage._objType != rhs_storage._objType {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._xfname != rhs_storage._xfname {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._sfname != rhs_storage._sfname {return false}
        if _storage._loid != rhs_storage._loid {return false}
        if _storage._maxcount != rhs_storage._maxcount {return false}
        if _storage._obfname != rhs_storage._obfname {return false}
        if _storage._sCondition != rhs_storage._sCondition {return false}
        if _storage._asc != rhs_storage._asc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_reResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".reResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "code"),
    3: .same(proto: "error"),
    4: .same(proto: "edge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.jwt)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.error)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.edge)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jwt.isEmpty {
      try visitor.visitSingularStringField(value: self.jwt, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 3)
    }
    if !self.edge.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.edge, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_reResp, rhs: Aitmed_Ecos_V1beta1_reResp) -> Bool {
    if lhs.jwt != rhs.jwt {return false}
    if lhs.code != rhs.code {return false}
    if lhs.error != rhs.error {return false}
    if lhs.edge != rhs.edge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_rvResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".rvResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "code"),
    3: .same(proto: "error"),
    4: .same(proto: "vertex"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.jwt)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.error)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.vertex)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jwt.isEmpty {
      try visitor.visitSingularStringField(value: self.jwt, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 3)
    }
    if !self.vertex.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vertex, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_rvResp, rhs: Aitmed_Ecos_V1beta1_rvResp) -> Bool {
    if lhs.jwt != rhs.jwt {return false}
    if lhs.code != rhs.code {return false}
    if lhs.error != rhs.error {return false}
    if lhs.vertex != rhs.vertex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_rdResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".rdResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "code"),
    3: .same(proto: "error"),
    4: .same(proto: "doc"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.jwt)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.error)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.doc)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jwt.isEmpty {
      try visitor.visitSingularStringField(value: self.jwt, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 3)
    }
    if !self.doc.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.doc, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_rdResp, rhs: Aitmed_Ecos_V1beta1_rdResp) -> Bool {
    if lhs.jwt != rhs.jwt {return false}
    if lhs.code != rhs.code {return false}
    if lhs.error != rhs.error {return false}
    if lhs.doc != rhs.doc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_dxReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".dxReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.jwt)
      case 2: try decoder.decodeRepeatedBytesField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jwt.isEmpty {
      try visitor.visitSingularStringField(value: self.jwt, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_dxReq, rhs: Aitmed_Ecos_V1beta1_dxReq) -> Bool {
    if lhs.jwt != rhs.jwt {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_dxResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".dxResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "code"),
    3: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.jwt)
      case 2: try decoder.decodeSingularInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.jwt.isEmpty {
      try visitor.visitSingularStringField(value: self.jwt, fieldNumber: 1)
    }
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 2)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_dxResp, rhs: Aitmed_Ecos_V1beta1_dxResp) -> Bool {
    if lhs.jwt != rhs.jwt {return false}
    if lhs.code != rhs.code {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_cvReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".cvReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "pmask"),
    3: .same(proto: "rmask"),
    4: .same(proto: "vertex"),
  ]

  fileprivate class _StorageClass {
    var _jwt: String = String()
    var _pmask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _rmask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _vertex: Aitmed_Ecos_V1beta1_Vertex? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _pmask = source._pmask
      _rmask = source._rmask
      _vertex = source._vertex
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._jwt)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pmask)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._rmask)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._vertex)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._jwt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jwt, fieldNumber: 1)
      }
      if let v = _storage._pmask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._rmask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._vertex {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_cvReq, rhs: Aitmed_Ecos_V1beta1_cvReq) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._pmask != rhs_storage._pmask {return false}
        if _storage._rmask != rhs_storage._rmask {return false}
        if _storage._vertex != rhs_storage._vertex {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_cvResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".cvResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "code"),
    3: .same(proto: "error"),
    4: .same(proto: "vertex"),
  ]

  fileprivate class _StorageClass {
    var _jwt: String = String()
    var _code: Int32 = 0
    var _error: String = String()
    var _vertex: Aitmed_Ecos_V1beta1_Vertex? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _code = source._code
      _error = source._error
      _vertex = source._vertex
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._jwt)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._error)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._vertex)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._jwt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jwt, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._error.isEmpty {
        try visitor.visitSingularStringField(value: _storage._error, fieldNumber: 3)
      }
      if let v = _storage._vertex {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_cvResp, rhs: Aitmed_Ecos_V1beta1_cvResp) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._error != rhs_storage._error {return false}
        if _storage._vertex != rhs_storage._vertex {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_cdReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".cdReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "pmask"),
    3: .same(proto: "rmask"),
    4: .same(proto: "doc"),
  ]

  fileprivate class _StorageClass {
    var _jwt: String = String()
    var _pmask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _rmask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _doc: Aitmed_Ecos_V1beta1_Doc? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _pmask = source._pmask
      _rmask = source._rmask
      _doc = source._doc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._jwt)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pmask)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._rmask)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._doc)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._jwt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jwt, fieldNumber: 1)
      }
      if let v = _storage._pmask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._rmask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._doc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_cdReq, rhs: Aitmed_Ecos_V1beta1_cdReq) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._pmask != rhs_storage._pmask {return false}
        if _storage._rmask != rhs_storage._rmask {return false}
        if _storage._doc != rhs_storage._doc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_cdResp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".cdResp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jwt"),
    2: .same(proto: "code"),
    3: .same(proto: "error"),
    4: .same(proto: "doc"),
  ]

  fileprivate class _StorageClass {
    var _jwt: String = String()
    var _code: Int32 = 0
    var _error: String = String()
    var _doc: Aitmed_Ecos_V1beta1_Doc? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _jwt = source._jwt
      _code = source._code
      _error = source._error
      _doc = source._doc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._jwt)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._error)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._doc)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._jwt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._jwt, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if !_storage._error.isEmpty {
        try visitor.visitSingularStringField(value: _storage._error, fieldNumber: 3)
      }
      if let v = _storage._doc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_cdResp, rhs: Aitmed_Ecos_V1beta1_cdResp) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._jwt != rhs_storage._jwt {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._error != rhs_storage._error {return false}
        if _storage._doc != rhs_storage._doc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
