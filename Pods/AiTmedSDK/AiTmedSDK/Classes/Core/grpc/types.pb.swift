// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

//
// AiTmed, Inc. (c) 2019

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Vertex is a low-level model that stores xxx.
struct Aitmed_Ecos_V1beta1_Vertex {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ctime: Int64 = 0

  var mtime: Int64 = 0

  var atime: Int64 = 0

  var atimes: Int32 = 0

  var tage: Int32 = 0

  var id: Data = SwiftProtobuf.Internal.emptyData

  var type: Int32 = 0

  var name: String = String()

  var deat: String = String()

  var pk: Data = SwiftProtobuf.Internal.emptyData

  var esk: Data = SwiftProtobuf.Internal.emptyData

  var uid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Edge is a low-level model that stores xxx.
struct Aitmed_Ecos_V1beta1_Edge {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ctime: Int64 {
    get {return _storage._ctime}
    set {_uniqueStorage()._ctime = newValue}
  }

  var mtime: Int64 {
    get {return _storage._mtime}
    set {_uniqueStorage()._mtime = newValue}
  }

  var atime: Int64 {
    get {return _storage._atime}
    set {_uniqueStorage()._atime = newValue}
  }

  var atimes: Int32 {
    get {return _storage._atimes}
    set {_uniqueStorage()._atimes = newValue}
  }

  var tage: Int32 {
    get {return _storage._tage}
    set {_uniqueStorage()._tage = newValue}
  }

  var id: Data {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var type: Int32 {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var deat: String {
    get {return _storage._deat}
    set {_uniqueStorage()._deat = newValue}
  }

  var subtype: Int32 {
    get {return _storage._subtype}
    set {_uniqueStorage()._subtype = newValue}
  }

  var bvid: Data {
    get {return _storage._bvid}
    set {_uniqueStorage()._bvid = newValue}
  }

  var evid: Data {
    get {return _storage._evid}
    set {_uniqueStorage()._evid = newValue}
  }

  var stime: Int64 {
    get {return _storage._stime}
    set {_uniqueStorage()._stime = newValue}
  }

  var etime: Int64 {
    get {return _storage._etime}
    set {_uniqueStorage()._etime = newValue}
  }

  var refid: Data {
    get {return _storage._refid}
    set {_uniqueStorage()._refid = newValue}
  }

  var besak: Data {
    get {return _storage._besak}
    set {_uniqueStorage()._besak = newValue}
  }

  var eesak: Data {
    get {return _storage._eesak}
    set {_uniqueStorage()._eesak = newValue}
  }

  var sig: Data {
    get {return _storage._sig}
    set {_uniqueStorage()._sig = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Doc is a low-level model that stores xxx.
struct Aitmed_Ecos_V1beta1_Doc {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ctime: Int64 = 0

  var mtime: Int64 = 0

  var atime: Int64 = 0

  var atimes: Int32 = 0

  var tage: Int32 = 0

  var id: Data = SwiftProtobuf.Internal.emptyData

  var type: Int32 = 0

  var name: String = String()

  var deat: String = String()

  var size: Int32 = 0

  var fid: Data = SwiftProtobuf.Internal.emptyData

  var eid: Data = SwiftProtobuf.Internal.emptyData

  var bsig: Data = SwiftProtobuf.Internal.emptyData

  var esig: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "aitmed.ecos.v1beta1"

extension Aitmed_Ecos_V1beta1_Vertex: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vertex"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ctime"),
    2: .same(proto: "mtime"),
    3: .same(proto: "atime"),
    4: .same(proto: "atimes"),
    5: .same(proto: "tage"),
    6: .same(proto: "id"),
    7: .same(proto: "type"),
    8: .same(proto: "name"),
    9: .same(proto: "deat"),
    10: .same(proto: "pk"),
    11: .same(proto: "esk"),
    12: .same(proto: "uid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.ctime)
      case 2: try decoder.decodeSingularInt64Field(value: &self.mtime)
      case 3: try decoder.decodeSingularInt64Field(value: &self.atime)
      case 4: try decoder.decodeSingularInt32Field(value: &self.atimes)
      case 5: try decoder.decodeSingularInt32Field(value: &self.tage)
      case 6: try decoder.decodeSingularBytesField(value: &self.id)
      case 7: try decoder.decodeSingularInt32Field(value: &self.type)
      case 8: try decoder.decodeSingularStringField(value: &self.name)
      case 9: try decoder.decodeSingularStringField(value: &self.deat)
      case 10: try decoder.decodeSingularBytesField(value: &self.pk)
      case 11: try decoder.decodeSingularBytesField(value: &self.esk)
      case 12: try decoder.decodeSingularStringField(value: &self.uid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 1)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 2)
    }
    if self.atime != 0 {
      try visitor.visitSingularInt64Field(value: self.atime, fieldNumber: 3)
    }
    if self.atimes != 0 {
      try visitor.visitSingularInt32Field(value: self.atimes, fieldNumber: 4)
    }
    if self.tage != 0 {
      try visitor.visitSingularInt32Field(value: self.tage, fieldNumber: 5)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 6)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 7)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 8)
    }
    if !self.deat.isEmpty {
      try visitor.visitSingularStringField(value: self.deat, fieldNumber: 9)
    }
    if !self.pk.isEmpty {
      try visitor.visitSingularBytesField(value: self.pk, fieldNumber: 10)
    }
    if !self.esk.isEmpty {
      try visitor.visitSingularBytesField(value: self.esk, fieldNumber: 11)
    }
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_Vertex, rhs: Aitmed_Ecos_V1beta1_Vertex) -> Bool {
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.atime != rhs.atime {return false}
    if lhs.atimes != rhs.atimes {return false}
    if lhs.tage != rhs.tage {return false}
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.name != rhs.name {return false}
    if lhs.deat != rhs.deat {return false}
    if lhs.pk != rhs.pk {return false}
    if lhs.esk != rhs.esk {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_Edge: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Edge"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ctime"),
    2: .same(proto: "mtime"),
    3: .same(proto: "atime"),
    4: .same(proto: "atimes"),
    5: .same(proto: "tage"),
    6: .same(proto: "id"),
    7: .same(proto: "type"),
    8: .same(proto: "name"),
    9: .same(proto: "deat"),
    10: .same(proto: "subtype"),
    11: .same(proto: "bvid"),
    12: .same(proto: "evid"),
    13: .same(proto: "stime"),
    14: .same(proto: "etime"),
    15: .same(proto: "refid"),
    16: .same(proto: "besak"),
    17: .same(proto: "eesak"),
    18: .same(proto: "sig"),
  ]

  fileprivate class _StorageClass {
    var _ctime: Int64 = 0
    var _mtime: Int64 = 0
    var _atime: Int64 = 0
    var _atimes: Int32 = 0
    var _tage: Int32 = 0
    var _id: Data = SwiftProtobuf.Internal.emptyData
    var _type: Int32 = 0
    var _name: String = String()
    var _deat: String = String()
    var _subtype: Int32 = 0
    var _bvid: Data = SwiftProtobuf.Internal.emptyData
    var _evid: Data = SwiftProtobuf.Internal.emptyData
    var _stime: Int64 = 0
    var _etime: Int64 = 0
    var _refid: Data = SwiftProtobuf.Internal.emptyData
    var _besak: Data = SwiftProtobuf.Internal.emptyData
    var _eesak: Data = SwiftProtobuf.Internal.emptyData
    var _sig: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ctime = source._ctime
      _mtime = source._mtime
      _atime = source._atime
      _atimes = source._atimes
      _tage = source._tage
      _id = source._id
      _type = source._type
      _name = source._name
      _deat = source._deat
      _subtype = source._subtype
      _bvid = source._bvid
      _evid = source._evid
      _stime = source._stime
      _etime = source._etime
      _refid = source._refid
      _besak = source._besak
      _eesak = source._eesak
      _sig = source._sig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._ctime)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._mtime)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._atime)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._atimes)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._tage)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._id)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._type)
        case 8: try decoder.decodeSingularStringField(value: &_storage._name)
        case 9: try decoder.decodeSingularStringField(value: &_storage._deat)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._subtype)
        case 11: try decoder.decodeSingularBytesField(value: &_storage._bvid)
        case 12: try decoder.decodeSingularBytesField(value: &_storage._evid)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._stime)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._etime)
        case 15: try decoder.decodeSingularBytesField(value: &_storage._refid)
        case 16: try decoder.decodeSingularBytesField(value: &_storage._besak)
        case 17: try decoder.decodeSingularBytesField(value: &_storage._eesak)
        case 18: try decoder.decodeSingularBytesField(value: &_storage._sig)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._ctime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ctime, fieldNumber: 1)
      }
      if _storage._mtime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._mtime, fieldNumber: 2)
      }
      if _storage._atime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._atime, fieldNumber: 3)
      }
      if _storage._atimes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._atimes, fieldNumber: 4)
      }
      if _storage._tage != 0 {
        try visitor.visitSingularInt32Field(value: _storage._tage, fieldNumber: 5)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._id, fieldNumber: 6)
      }
      if _storage._type != 0 {
        try visitor.visitSingularInt32Field(value: _storage._type, fieldNumber: 7)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 8)
      }
      if !_storage._deat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deat, fieldNumber: 9)
      }
      if _storage._subtype != 0 {
        try visitor.visitSingularInt32Field(value: _storage._subtype, fieldNumber: 10)
      }
      if !_storage._bvid.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._bvid, fieldNumber: 11)
      }
      if !_storage._evid.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._evid, fieldNumber: 12)
      }
      if _storage._stime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._stime, fieldNumber: 13)
      }
      if _storage._etime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._etime, fieldNumber: 14)
      }
      if !_storage._refid.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._refid, fieldNumber: 15)
      }
      if !_storage._besak.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._besak, fieldNumber: 16)
      }
      if !_storage._eesak.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._eesak, fieldNumber: 17)
      }
      if !_storage._sig.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._sig, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_Edge, rhs: Aitmed_Ecos_V1beta1_Edge) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ctime != rhs_storage._ctime {return false}
        if _storage._mtime != rhs_storage._mtime {return false}
        if _storage._atime != rhs_storage._atime {return false}
        if _storage._atimes != rhs_storage._atimes {return false}
        if _storage._tage != rhs_storage._tage {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._deat != rhs_storage._deat {return false}
        if _storage._subtype != rhs_storage._subtype {return false}
        if _storage._bvid != rhs_storage._bvid {return false}
        if _storage._evid != rhs_storage._evid {return false}
        if _storage._stime != rhs_storage._stime {return false}
        if _storage._etime != rhs_storage._etime {return false}
        if _storage._refid != rhs_storage._refid {return false}
        if _storage._besak != rhs_storage._besak {return false}
        if _storage._eesak != rhs_storage._eesak {return false}
        if _storage._sig != rhs_storage._sig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Aitmed_Ecos_V1beta1_Doc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Doc"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ctime"),
    2: .same(proto: "mtime"),
    3: .same(proto: "atime"),
    4: .same(proto: "atimes"),
    5: .same(proto: "tage"),
    6: .same(proto: "id"),
    7: .same(proto: "type"),
    8: .same(proto: "name"),
    9: .same(proto: "deat"),
    10: .same(proto: "size"),
    11: .same(proto: "fid"),
    12: .same(proto: "eid"),
    13: .same(proto: "bsig"),
    14: .same(proto: "esig"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.ctime)
      case 2: try decoder.decodeSingularInt64Field(value: &self.mtime)
      case 3: try decoder.decodeSingularInt64Field(value: &self.atime)
      case 4: try decoder.decodeSingularInt32Field(value: &self.atimes)
      case 5: try decoder.decodeSingularInt32Field(value: &self.tage)
      case 6: try decoder.decodeSingularBytesField(value: &self.id)
      case 7: try decoder.decodeSingularInt32Field(value: &self.type)
      case 8: try decoder.decodeSingularStringField(value: &self.name)
      case 9: try decoder.decodeSingularStringField(value: &self.deat)
      case 10: try decoder.decodeSingularInt32Field(value: &self.size)
      case 11: try decoder.decodeSingularBytesField(value: &self.fid)
      case 12: try decoder.decodeSingularBytesField(value: &self.eid)
      case 13: try decoder.decodeSingularBytesField(value: &self.bsig)
      case 14: try decoder.decodeSingularBytesField(value: &self.esig)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 1)
    }
    if self.mtime != 0 {
      try visitor.visitSingularInt64Field(value: self.mtime, fieldNumber: 2)
    }
    if self.atime != 0 {
      try visitor.visitSingularInt64Field(value: self.atime, fieldNumber: 3)
    }
    if self.atimes != 0 {
      try visitor.visitSingularInt32Field(value: self.atimes, fieldNumber: 4)
    }
    if self.tage != 0 {
      try visitor.visitSingularInt32Field(value: self.tage, fieldNumber: 5)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 6)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 7)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 8)
    }
    if !self.deat.isEmpty {
      try visitor.visitSingularStringField(value: self.deat, fieldNumber: 9)
    }
    if self.size != 0 {
      try visitor.visitSingularInt32Field(value: self.size, fieldNumber: 10)
    }
    if !self.fid.isEmpty {
      try visitor.visitSingularBytesField(value: self.fid, fieldNumber: 11)
    }
    if !self.eid.isEmpty {
      try visitor.visitSingularBytesField(value: self.eid, fieldNumber: 12)
    }
    if !self.bsig.isEmpty {
      try visitor.visitSingularBytesField(value: self.bsig, fieldNumber: 13)
    }
    if !self.esig.isEmpty {
      try visitor.visitSingularBytesField(value: self.esig, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Aitmed_Ecos_V1beta1_Doc, rhs: Aitmed_Ecos_V1beta1_Doc) -> Bool {
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.atime != rhs.atime {return false}
    if lhs.atimes != rhs.atimes {return false}
    if lhs.tage != rhs.tage {return false}
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.name != rhs.name {return false}
    if lhs.deat != rhs.deat {return false}
    if lhs.size != rhs.size {return false}
    if lhs.fid != rhs.fid {return false}
    if lhs.eid != rhs.eid {return false}
    if lhs.bsig != rhs.bsig {return false}
    if lhs.esig != rhs.esig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
