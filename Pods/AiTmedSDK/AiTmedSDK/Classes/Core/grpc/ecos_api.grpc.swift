//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ecos_api.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Aitmed_Ecos_V1beta1_EcosAPIceCall: ClientCallUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIceCallBase: ClientCallUnaryBase<Aitmed_Ecos_V1beta1_ceReq, Aitmed_Ecos_V1beta1_ceResp>, Aitmed_Ecos_V1beta1_EcosAPIceCall {
  override class var method: String { return "/aitmed.ecos.v1beta1.EcosAPI/ce" }
}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIreCall: ClientCallUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIreCallBase: ClientCallUnaryBase<Aitmed_Ecos_V1beta1_rxReq, Aitmed_Ecos_V1beta1_reResp>, Aitmed_Ecos_V1beta1_EcosAPIreCall {
  override class var method: String { return "/aitmed.ecos.v1beta1.EcosAPI/re" }
}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIdxCall: ClientCallUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIdxCallBase: ClientCallUnaryBase<Aitmed_Ecos_V1beta1_dxReq, Aitmed_Ecos_V1beta1_dxResp>, Aitmed_Ecos_V1beta1_EcosAPIdxCall {
  override class var method: String { return "/aitmed.ecos.v1beta1.EcosAPI/dx" }
}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIcvCall: ClientCallUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIcvCallBase: ClientCallUnaryBase<Aitmed_Ecos_V1beta1_cvReq, Aitmed_Ecos_V1beta1_cvResp>, Aitmed_Ecos_V1beta1_EcosAPIcvCall {
  override class var method: String { return "/aitmed.ecos.v1beta1.EcosAPI/cv" }
}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIrvCall: ClientCallUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIrvCallBase: ClientCallUnaryBase<Aitmed_Ecos_V1beta1_rxReq, Aitmed_Ecos_V1beta1_rvResp>, Aitmed_Ecos_V1beta1_EcosAPIrvCall {
  override class var method: String { return "/aitmed.ecos.v1beta1.EcosAPI/rv" }
}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIcdCall: ClientCallUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIcdCallBase: ClientCallUnaryBase<Aitmed_Ecos_V1beta1_cdReq, Aitmed_Ecos_V1beta1_cdResp>, Aitmed_Ecos_V1beta1_EcosAPIcdCall {
  override class var method: String { return "/aitmed.ecos.v1beta1.EcosAPI/cd" }
}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIrdCall: ClientCallUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIrdCallBase: ClientCallUnaryBase<Aitmed_Ecos_V1beta1_rxReq, Aitmed_Ecos_V1beta1_rdResp>, Aitmed_Ecos_V1beta1_EcosAPIrdCall {
  override class var method: String { return "/aitmed.ecos.v1beta1.EcosAPI/rd" }
}


/// Instantiate Aitmed_Ecos_V1beta1_EcosAPIServiceClient, then call methods of this protocol to make API calls.
internal protocol Aitmed_Ecos_V1beta1_EcosAPIService: ServiceClient {
  /// Synchronous. Unary.
  func ce(_ request: Aitmed_Ecos_V1beta1_ceReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_ceResp
  /// Asynchronous. Unary.
  @discardableResult
  func ce(_ request: Aitmed_Ecos_V1beta1_ceReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_ceResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIceCall

  /// Synchronous. Unary.
  func re(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_reResp
  /// Asynchronous. Unary.
  @discardableResult
  func re(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_reResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIreCall

  /// Synchronous. Unary.
  func dx(_ request: Aitmed_Ecos_V1beta1_dxReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_dxResp
  /// Asynchronous. Unary.
  @discardableResult
  func dx(_ request: Aitmed_Ecos_V1beta1_dxReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_dxResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIdxCall

  /// Synchronous. Unary.
  func cv(_ request: Aitmed_Ecos_V1beta1_cvReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_cvResp
  /// Asynchronous. Unary.
  @discardableResult
  func cv(_ request: Aitmed_Ecos_V1beta1_cvReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_cvResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIcvCall

  /// Synchronous. Unary.
  func rv(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_rvResp
  /// Asynchronous. Unary.
  @discardableResult
  func rv(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_rvResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIrvCall

  /// Synchronous. Unary.
  func cd(_ request: Aitmed_Ecos_V1beta1_cdReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_cdResp
  /// Asynchronous. Unary.
  @discardableResult
  func cd(_ request: Aitmed_Ecos_V1beta1_cdReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_cdResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIcdCall

  /// Synchronous. Unary.
  func rd(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_rdResp
  /// Asynchronous. Unary.
  @discardableResult
  func rd(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_rdResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIrdCall

}

internal extension Aitmed_Ecos_V1beta1_EcosAPIService {
  /// Synchronous. Unary.
  func ce(_ request: Aitmed_Ecos_V1beta1_ceReq) throws -> Aitmed_Ecos_V1beta1_ceResp {
    return try self.ce(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func ce(_ request: Aitmed_Ecos_V1beta1_ceReq, completion: @escaping (Aitmed_Ecos_V1beta1_ceResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIceCall {
    return try self.ce(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func re(_ request: Aitmed_Ecos_V1beta1_rxReq) throws -> Aitmed_Ecos_V1beta1_reResp {
    return try self.re(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func re(_ request: Aitmed_Ecos_V1beta1_rxReq, completion: @escaping (Aitmed_Ecos_V1beta1_reResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIreCall {
    return try self.re(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func dx(_ request: Aitmed_Ecos_V1beta1_dxReq) throws -> Aitmed_Ecos_V1beta1_dxResp {
    return try self.dx(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func dx(_ request: Aitmed_Ecos_V1beta1_dxReq, completion: @escaping (Aitmed_Ecos_V1beta1_dxResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIdxCall {
    return try self.dx(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func cv(_ request: Aitmed_Ecos_V1beta1_cvReq) throws -> Aitmed_Ecos_V1beta1_cvResp {
    return try self.cv(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func cv(_ request: Aitmed_Ecos_V1beta1_cvReq, completion: @escaping (Aitmed_Ecos_V1beta1_cvResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIcvCall {
    return try self.cv(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func rv(_ request: Aitmed_Ecos_V1beta1_rxReq) throws -> Aitmed_Ecos_V1beta1_rvResp {
    return try self.rv(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func rv(_ request: Aitmed_Ecos_V1beta1_rxReq, completion: @escaping (Aitmed_Ecos_V1beta1_rvResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIrvCall {
    return try self.rv(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func cd(_ request: Aitmed_Ecos_V1beta1_cdReq) throws -> Aitmed_Ecos_V1beta1_cdResp {
    return try self.cd(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func cd(_ request: Aitmed_Ecos_V1beta1_cdReq, completion: @escaping (Aitmed_Ecos_V1beta1_cdResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIcdCall {
    return try self.cd(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func rd(_ request: Aitmed_Ecos_V1beta1_rxReq) throws -> Aitmed_Ecos_V1beta1_rdResp {
    return try self.rd(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func rd(_ request: Aitmed_Ecos_V1beta1_rxReq, completion: @escaping (Aitmed_Ecos_V1beta1_rdResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIrdCall {
    return try self.rd(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Aitmed_Ecos_V1beta1_EcosAPIServiceClient: ServiceClientBase, Aitmed_Ecos_V1beta1_EcosAPIService {
  /// Synchronous. Unary.
  internal func ce(_ request: Aitmed_Ecos_V1beta1_ceReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_ceResp {
    return try Aitmed_Ecos_V1beta1_EcosAPIceCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func ce(_ request: Aitmed_Ecos_V1beta1_ceReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_ceResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIceCall {
    return try Aitmed_Ecos_V1beta1_EcosAPIceCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func re(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_reResp {
    return try Aitmed_Ecos_V1beta1_EcosAPIreCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func re(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_reResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIreCall {
    return try Aitmed_Ecos_V1beta1_EcosAPIreCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func dx(_ request: Aitmed_Ecos_V1beta1_dxReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_dxResp {
    return try Aitmed_Ecos_V1beta1_EcosAPIdxCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func dx(_ request: Aitmed_Ecos_V1beta1_dxReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_dxResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIdxCall {
    return try Aitmed_Ecos_V1beta1_EcosAPIdxCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func cv(_ request: Aitmed_Ecos_V1beta1_cvReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_cvResp {
    return try Aitmed_Ecos_V1beta1_EcosAPIcvCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func cv(_ request: Aitmed_Ecos_V1beta1_cvReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_cvResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIcvCall {
    return try Aitmed_Ecos_V1beta1_EcosAPIcvCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func rv(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_rvResp {
    return try Aitmed_Ecos_V1beta1_EcosAPIrvCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func rv(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_rvResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIrvCall {
    return try Aitmed_Ecos_V1beta1_EcosAPIrvCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func cd(_ request: Aitmed_Ecos_V1beta1_cdReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_cdResp {
    return try Aitmed_Ecos_V1beta1_EcosAPIcdCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func cd(_ request: Aitmed_Ecos_V1beta1_cdReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_cdResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIcdCall {
    return try Aitmed_Ecos_V1beta1_EcosAPIcdCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func rd(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata) throws -> Aitmed_Ecos_V1beta1_rdResp {
    return try Aitmed_Ecos_V1beta1_EcosAPIrdCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func rd(_ request: Aitmed_Ecos_V1beta1_rxReq, metadata customMetadata: Metadata, completion: @escaping (Aitmed_Ecos_V1beta1_rdResp?, CallResult) -> Void) throws -> Aitmed_Ecos_V1beta1_EcosAPIrdCall {
    return try Aitmed_Ecos_V1beta1_EcosAPIrdCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Aitmed_Ecos_V1beta1_EcosAPIProvider: ServiceProvider {
  func ce(request: Aitmed_Ecos_V1beta1_ceReq, session: Aitmed_Ecos_V1beta1_EcosAPIceSession) throws -> Aitmed_Ecos_V1beta1_ceResp
  func re(request: Aitmed_Ecos_V1beta1_rxReq, session: Aitmed_Ecos_V1beta1_EcosAPIreSession) throws -> Aitmed_Ecos_V1beta1_reResp
  func dx(request: Aitmed_Ecos_V1beta1_dxReq, session: Aitmed_Ecos_V1beta1_EcosAPIdxSession) throws -> Aitmed_Ecos_V1beta1_dxResp
  func cv(request: Aitmed_Ecos_V1beta1_cvReq, session: Aitmed_Ecos_V1beta1_EcosAPIcvSession) throws -> Aitmed_Ecos_V1beta1_cvResp
  func rv(request: Aitmed_Ecos_V1beta1_rxReq, session: Aitmed_Ecos_V1beta1_EcosAPIrvSession) throws -> Aitmed_Ecos_V1beta1_rvResp
  func cd(request: Aitmed_Ecos_V1beta1_cdReq, session: Aitmed_Ecos_V1beta1_EcosAPIcdSession) throws -> Aitmed_Ecos_V1beta1_cdResp
  func rd(request: Aitmed_Ecos_V1beta1_rxReq, session: Aitmed_Ecos_V1beta1_EcosAPIrdSession) throws -> Aitmed_Ecos_V1beta1_rdResp
}

extension Aitmed_Ecos_V1beta1_EcosAPIProvider {
  internal var serviceName: String { return "aitmed.ecos.v1beta1.EcosAPI" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/aitmed.ecos.v1beta1.EcosAPI/ce":
      return try Aitmed_Ecos_V1beta1_EcosAPIceSessionBase(
        handler: handler,
        providerBlock: { try self.ce(request: $0, session: $1 as! Aitmed_Ecos_V1beta1_EcosAPIceSessionBase) })
          .run()
    case "/aitmed.ecos.v1beta1.EcosAPI/re":
      return try Aitmed_Ecos_V1beta1_EcosAPIreSessionBase(
        handler: handler,
        providerBlock: { try self.re(request: $0, session: $1 as! Aitmed_Ecos_V1beta1_EcosAPIreSessionBase) })
          .run()
    case "/aitmed.ecos.v1beta1.EcosAPI/dx":
      return try Aitmed_Ecos_V1beta1_EcosAPIdxSessionBase(
        handler: handler,
        providerBlock: { try self.dx(request: $0, session: $1 as! Aitmed_Ecos_V1beta1_EcosAPIdxSessionBase) })
          .run()
    case "/aitmed.ecos.v1beta1.EcosAPI/cv":
      return try Aitmed_Ecos_V1beta1_EcosAPIcvSessionBase(
        handler: handler,
        providerBlock: { try self.cv(request: $0, session: $1 as! Aitmed_Ecos_V1beta1_EcosAPIcvSessionBase) })
          .run()
    case "/aitmed.ecos.v1beta1.EcosAPI/rv":
      return try Aitmed_Ecos_V1beta1_EcosAPIrvSessionBase(
        handler: handler,
        providerBlock: { try self.rv(request: $0, session: $1 as! Aitmed_Ecos_V1beta1_EcosAPIrvSessionBase) })
          .run()
    case "/aitmed.ecos.v1beta1.EcosAPI/cd":
      return try Aitmed_Ecos_V1beta1_EcosAPIcdSessionBase(
        handler: handler,
        providerBlock: { try self.cd(request: $0, session: $1 as! Aitmed_Ecos_V1beta1_EcosAPIcdSessionBase) })
          .run()
    case "/aitmed.ecos.v1beta1.EcosAPI/rd":
      return try Aitmed_Ecos_V1beta1_EcosAPIrdSessionBase(
        handler: handler,
        providerBlock: { try self.rd(request: $0, session: $1 as! Aitmed_Ecos_V1beta1_EcosAPIrdSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIceSession: ServerSessionUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIceSessionBase: ServerSessionUnaryBase<Aitmed_Ecos_V1beta1_ceReq, Aitmed_Ecos_V1beta1_ceResp>, Aitmed_Ecos_V1beta1_EcosAPIceSession {}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIreSession: ServerSessionUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIreSessionBase: ServerSessionUnaryBase<Aitmed_Ecos_V1beta1_rxReq, Aitmed_Ecos_V1beta1_reResp>, Aitmed_Ecos_V1beta1_EcosAPIreSession {}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIdxSession: ServerSessionUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIdxSessionBase: ServerSessionUnaryBase<Aitmed_Ecos_V1beta1_dxReq, Aitmed_Ecos_V1beta1_dxResp>, Aitmed_Ecos_V1beta1_EcosAPIdxSession {}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIcvSession: ServerSessionUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIcvSessionBase: ServerSessionUnaryBase<Aitmed_Ecos_V1beta1_cvReq, Aitmed_Ecos_V1beta1_cvResp>, Aitmed_Ecos_V1beta1_EcosAPIcvSession {}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIrvSession: ServerSessionUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIrvSessionBase: ServerSessionUnaryBase<Aitmed_Ecos_V1beta1_rxReq, Aitmed_Ecos_V1beta1_rvResp>, Aitmed_Ecos_V1beta1_EcosAPIrvSession {}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIcdSession: ServerSessionUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIcdSessionBase: ServerSessionUnaryBase<Aitmed_Ecos_V1beta1_cdReq, Aitmed_Ecos_V1beta1_cdResp>, Aitmed_Ecos_V1beta1_EcosAPIcdSession {}

internal protocol Aitmed_Ecos_V1beta1_EcosAPIrdSession: ServerSessionUnary {}

fileprivate final class Aitmed_Ecos_V1beta1_EcosAPIrdSessionBase: ServerSessionUnaryBase<Aitmed_Ecos_V1beta1_rxReq, Aitmed_Ecos_V1beta1_rdResp>, Aitmed_Ecos_V1beta1_EcosAPIrdSession {}

